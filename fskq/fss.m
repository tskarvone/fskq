function U = fss(u, d)
% FSS - a fully symmetric set
%   Given a generator vector u, U = FSS(u) constructs a fully
%   symmetric set in dimension length(u). A fully symmetric set
%   consists of all distinct vectors that have been formed as 
%   permutations of the elements of u with all possible sign
%   combinations.
%
%   Given two arguments u and d, U = FSS(u, d) constructs a fully
%   symmetric set in dimension d generated by u appended with 
%   d-length(u) zeros.
%
% INPUT
%   - u   the generator vector
%   - d   dimension (optional), if not set, assumed equal to length(u)      
%
% OUTPUT
%   - U   the fully symmetric set generated by u

% NOTE:
%   Several improvements to this function are possible. At the moment
%   FSSs in high (d > 100) are generated quite slowly. Switching to 
%   loops and recursion would probably save considerable time there.

% Toni Karvonen, 2017
% ( with a segment taken from Bruno Luong's answer on 13 Apr, 2014:
%   https://se.mathworks.com/matlabcentral/newsreader/view_thread/164470 )

  % Some argument checks
  if nargin < 2
    d = length(u);
  end
  
  if length(u) > d
    error('Length of the generator vector u cannot exceed the given dimension d.');
  end
  
  % Construct a vector of absolute values of non-zero elements
  % of the generator vector u in ascending order
  uu = abs(u(:));
  uu = sort(uu(uu > 1e-14));
  duu = length(uu);
  
  if duu == 0
    U = zeros(d, 1);
    return
  end
  
  % Determine multiplicities of each unique non-zero element and
  % form a matrix C whose columns contain each unique vector s.t.
  % the i'th element is between 0 and the multiplicity of 
  % the corresponding unique element of the generator vector.
  [uuq, iuu] = unique(uu);
  eln = [diff(iuu); duu - iuu(end) + 1];
  elnc = {};
  for i = 1:length(eln)
    elnc{i} = 0:eln(i);
  end
  C = cartesian(elnc);
  
  % Each column of C describes how many negative signs the
  % corresponding elements are given when permutations are
  % generated. We now loop through the columns of C, set
  % as many elements negative as indicated by the current
  % column, generate all unique permutations of the resulting
  % vector and append the result to the full fully symmetric 
  % set U.
  % IMPROVEMENT: only roughly half of the columns of C
  %              need to be used as they just correspond to
  %              multiplication of the other half by -1. This
  %              halves computation time as UPERM needs to called
  %              for only half of the columns of C.
  U = [];
  Cl = size(C, 2);
  for j = 1:Cl
    uuu = uu;
    l = 1;
    for i = 1:length(uuq)
      k = C(i,j);
      if k > 0
        uuu(l:(l+k-1)) = -1*uuq(i);
      end
      l = l + eln(i);
    end
    uuu = [uuu; zeros(d-duu,1)];
    U = [U uperm(uuu)'];
  end
  
end

% The following auxiliary function constructs indices of unique permutations
% of elements of the given vector. Taken from (the answer by Bruno):
% https://se.mathworks.com/matlabcentral/newsreader/view_thread/164470
function p = uperm(a)
  [u, ~, J] = unique(a);
  n = length(a);
  
  ktab = histc(J,1:max(J));
  l = n;
  p = zeros(1, n);
  s = 1;
  for i=1:length(ktab)
      k = ktab(i);
      c = nchoosek(1:l, k);
      m = size(c,1);
      [t, ~] = find(~p.');
      t = reshape(t, [], s);
      c = t(c,:)';
      s = s*m;
      r = repmat((1:s)',[1 k]);
      q = accumarray([r(:) c(:)], i, [s n]);
      p = repmat(p, [m 1]) + q;
      l = l - k;
  end
  
  p = u(p);
end

